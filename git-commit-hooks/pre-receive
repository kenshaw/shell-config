#!/usr/bin/perl

use strict;

sub trim {
    my $str = shift;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    return $str;
}

my $errors = 0; # error count
my @logs = ();  # collected logs from all revisions

# read commit revisions being pushed to the server
my @revs = <STDIN>;

# load hook settings
my $email_domain = `git config hooks.defaultdomain`;
chomp($email_domain);

my $jira_prefix = `git config hooks.jiraprefix`;
chomp($jira_prefix);

my $authenticated_user_email = lc(trim($ENV{REMOTE_USER}).'@'.trim($email_domain));

# loop through the all pushed packs, and collect the logs
foreach my $revinfo (@revs) {
    chomp($revinfo);
    my ($rev_old, $rev_new, $refname) = split(' ', $revinfo, 3);
    my $branch_name = substr($refname, length('refs/heads/'));
    # print ">>> $rev_old // $rev_new // $refname // $branch_name\n";

    my $rev_old_short = substr($rev_old, 0, 7);
    my $rev_new_short = substr($rev_new, 0, 7);


    # get the revision info and add to the log array for later validation
    my $log;
    if ($rev_old eq '0000000000000000000000000000000000000000') {
        # this is a new branch or tag, so collect the data in a different way
        my $other_branches = `git for-each-ref --format='\%(refname)' refs/heads/ | grep -F -v $refname`;
        chomp($other_branches);
        $other_branches =~ s/\n/ /g;
        $log = `git rev-parse --not $other_branches | git log --format='$branch_name:1:\%h:\%ae:\%s' --stdin $rev_new`;
    } else {
        $log = `git log --format='$branch_name:0:\%h:\%ae:\%s' $rev_old..$rev_new`;

        # check if this is a non-linear commit (merge), and if so, reject it
        my $merges = `git rev-list --merges $rev_old..$rev_new`;
        chomp($merges);
        if (length($merges) > 0) {
            print "ERROR: [$branch_name $rev_old_short..$rev_new_short] Non-linear merge detected.\n";
            print "ERROR: [$branch_name $rev_old_short..$rev_new_short] Please configure git to always setup rebase on branches: git config --global branch.autosetuprebase always\n";
            print "ERROR: [$branch_name $rev_old_short..$rev_new_short] Please set git to use rebase during pull: git config branch.$branch_name.rebase true\n\n";
            $errors++;
        }
    }
    chomp($log);

    # print ">>> log: $log\n";
    push @logs, split("\n", $log);
}

#print ">>> @logs<\n";

# loop through the collected logs, and verify the author and commit messages if no previous detected errors
unless ($errors) {
    foreach my $log (@logs) {
        my $error_encountered = 0;

        # extract info from log array
        my ($branch_name, $branch_or_tag_creation, $commit, $email, $message) = split(':', $log, 5);

        # error out if we don't have the right email address (needed for tracking in fisheye ... )
        if ((!$branch_or_tag_creation || length($email)) && $email !~ m/\@$email_domain$/i) {
            print "ERROR: [$branch_name $commit] Commit was not made using a \@$email_domain email address.\n";
            print "ERROR: [$branch_name $commit] Please set your email address if you have not already done so: git config --global user.email $authenticated_user_email\n";
            print "ERROR: [$branch_name $commit] Please change the commit author before pushing: git commit --amend --reset-author\n\n";
            $errors++;
            $error_encountered = 1;
        }

        # error out if the committer is not the same as the authenticated user
        if (lc(trim($email)) ne $authenticated_user_email) {
            print "ERROR: [$branch_name $commit] Author '$email' is not the same as user '$authenticated_user_email'\n";
            print "ERROR: [$branch_name $commit] Please change your email address: git config --global user.email $authenticated_user_email\n";
            print "ERROR: [$branch_name $commit] Please change the commit author before pushing: git commit --amend --reset-author\n\n";

            $errors++;
            $error_encountered = 1;
        }

        # error out if the log message isn't long enough
        if ((!$branch_or_tag_creation || length($message)) && length($message) < 10) {
            print "ERROR: [$branch_name $commit] Log message is not long enough.\n";
            print "ERROR: [$branch_name $commit] Please change the commit message before pushing: git commit --amend -m 'Fixing XXX'\n\n";
            $errors++;
            $error_encountered = 1;
        }

        # error out if there is no JIRA ID in the branch name or log message
        if (length($jira_prefix) > 0 && $message !~ m/$jira_prefix[0-9]+/) {
            my $sample_issue_id = $jira_prefix.'XXX';
            print "ERROR: [$branch_name $commit] Log message is missing JIRA issue ID ($sample_issue_id).\n";
            print "ERROR: [$branch_name $commit] Please change the commit message before pushing: git commit --amend -m 'Fixing $sample_issue_id'\n\n";
            $errors++;
            $error_encountered = 1;
        }

        unless ($error_encountered) {
            print "GOOD:  [$branch_name $commit] $message\n";
        }
    }
}

print "Encountered $errors error(s) -- push aborted.\n" if $errors;

exit $errors;
