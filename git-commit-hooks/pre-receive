#!/usr/bin/perl

use strict;

my $errors = 0; # error count
my @logs = ();  # collected logs from all revisions

# read commit revisions being pushed to the server
my @revs = <STDIN>;

# load hook settings
my $email_domain = `git config hooks.defaultdomain`;
chomp($email_domain);

my $jira_prefix = `git config hooks.jiraprefix`;
chomp($jira_prefix);

my $committer_email = $ENV{REMOTE_USER}.'@'.$email_domain;

# loop through the all pushed packs, and collect the logs
foreach my $revinfo (@revs) {
    chomp($revinfo);
    my ($rev_old, $rev_new, $refname) = split(' ', $revinfo, 3);
    my $branch_name = substr($refname, length('refs/heads/'));
    # print ">>> $rev_old // $rev_new // $refname // $branch_name\n";

    # check if this is a non-linear commit, and if so, reject it
    my $merges = `git rev-list --merges $rev_old..$rev_new`;
    chomp($merges);
    if (length($merges) > 0) {
        print "ERROR: non-linear merge found on branch '$branch_name' between '$rev_old' and '$rev_new'.\n";
        print "Please configure git to always setup rebase on branches: git config --global branch.autosetuprebase always\n";
        print "Please set git to use rebase for '$branch_name': git config branch.$branch_name.rebase true\n\n";
        $errors++;
    }

    # get the revision info and add to the log array for validation
    my $log;
    if ($rev_old eq '0000000000000000000000000000000000000000') {
        # this is a new branch or tag, so collect the data in a different way
        my $other_branches = `git for-each-ref --format='\%(refname)' refs/heads/ | grep -F -v $refname`;
        chomp($other_branches);
        $other_branches =~ s/\n/ /g;
        $log = `git rev-parse --not $other_branches | git log --format='$branch_name:1:\%h:\%ae:\%s' --stdin $rev_new`;
    } else {
        $log = `git log --format='$branch_name:0:\%h:\%ae:\%s' $rev_old..$rev_new`;
    }
    chomp($log);

    # print ">>> log: $log\n";
    push @logs, split("\n", $log);
}

#print ">>> @logs<\n";

unless ($errors) {
# loop through the collected logs, and verify the author and commit messages
    foreach my $log (@logs) {
        my ($branch_name, $branch_or_tag_creation, $commit, $email, $message) = split(':', $log, 5);
        my $error_encountered = 0;

        # error out if we don't have the right email address (needed for tracking in fisheye ... )
        if ((!$branch_or_tag_creation || length($email)) && $email !~ m/\@$email_domain$/i) {
            print "ERROR: commit '$commit' ($branch_name) was not made using a \@$email_domain email address.\n";
            print "Please set your email address if you have not already done so: git config --global user.email $committer_email\n";
            print "Please change the commit author before pushing: git commit --amend --reset-author\n\n";
            $errors++;
            $error_encountered = 1;
        }

        # error out if the log message isn't long enough or if there is no JIRA ID in the branch name or log message
        if (length($jira_prefix) > 0 && (!$branch_or_tag_creation || length($message)) && (length($message) < 10 || $message !~ m/$jira_prefix[0-9]{5,}/)) {
            my $issue_id = $branch_name ne 'master' ? $branch_name : $jira_prefix.'XXXXX';
            print "ERROR: commit '$commit' ($branch_name) log message is not long enough or is missing a JIRA issue ID ($issue_id).\n";
            print "Please change the commit message before pushing: git commit --amend -m 'fixing $issue_id'\n\n";
            $errors++;
            $error_encountered = 1;
        }

        unless ($error_encountered) {
            print "Good: $commit ($branch_name) $message\n";
        }
    }
}

print "Encountered $errors error(s) -- push aborted.\n" if $errors;

exit $errors;
