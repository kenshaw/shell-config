# ----[ exit if not interactive ]-----------------------------
[ -z "$PS1" ] && return
# ------------------------------------------------------------


# ----[ general bash settings ]-------------------------------
# ignore commands with leading spaces and duplicates
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check window size after each command, and update LINES/COLUMNS
shopt -s checkwinsize

# enable vi mode
set -o vi

# platform
PLATFORM=$(uname|sed -e 's/_.*//'|tr '[:upper:]' '[:lower:]'|sed -e 's/^\(msys\|mingw\).*/windows/')
# ------------------------------------------------------------


# ----[ platform specific settings ]--------------------------
case $PLATFORM in
  linux)
    export EDITOR=/etc/alternatives/editor
    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
  ;;

  darwin)
    if [ -x /usr/local/bin/brew ]; then
      export HOMEBREW_PREFIX="$(/usr/local/bin/brew --prefix)"
    elif [ -x /opt/homebrew/bin/brew ]; then
      export HOMEBREW_PREFIX="$(/opt/homebrew/bin/brew --prefix)"
    fi
    # to fix scripts:
    # sudo port install coreutils gawk gsed
    alias ls='ls -G'
    alias vi='nvim'
    alias vim='nvim'
    alias mtr=$HOMEBREW_PREFIX/sbin/mtr

    export TERM=xterm-256color
    export MANPAGER=$HOMEBREW_PREFIX/bin/less
    export EDITOR=$HOMEBREW_PREFIX/bin/nvim
    export BASH_SILENCE_DEPRECATION_WARNING=1
    export HOMEBREW_NO_ENV_HINTS=1

    [ -d $HOME/Library/Python/3.7/bin ] && \
      export PATH=$PATH:$HOME/Library/Python/3.7/bin
    [ -d $HOMEBREW_PREFIX/lib/pkgconfig ] && \
      export PKG_CONFIG_PATH=$HOMEBREW_PREFIX/lib/pkgconfig
    [ -e $HOMEBREW_PREFIX/etc/bash_completion ] && \
      source $HOMEBREW_PREFIX/etc/bash_completion
    [ -e /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ] && \
      source /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash

    export PATH=$HOMEBREW_PREFIX/bin:$PATH

    # use proxy when on a connection with a http proxy
#    NETDEV="Wi-Fi"
#    NET_LOCATION=$(networksetup -getcurrentlocation)
#    PROXY_IP=$(networksetup -getwebproxy $NETDEV|egrep ^Server:|awk '{print $2}')
#    PROXY_PORT=$(networksetup -getwebproxy $NETDEV|egrep ^Port:|awk '{print $2}')
#
#    if [[ "${NET_LOCATION}" != "Automatic" && "${PROXY_IP}" != "" ]]; then
#      export HTTP_PROXY="http://${PROXY_IP}:${PROXY_PORT}/"
#      export HTTPS_PROXY="https://${PROXY_IP}:${PROXY_PORT}/"
#      echo ">>> using HTTP/S Proxy: ${HTTP_PROXY}"
#    fi
  ;;

  windows)
    alias vi='vim'
    [ -d /mingw64/bin ] && \
      export PATH=/mingw64/bin:$PATH
  ;;
esac
# ------------------------------------------------------------


# ----[ bash prompt ]-----------------------------------------
[ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ] && \
  debian_chroot=$(cat /etc/debian_chroot)

# enable color prompt for specific TERMs
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
case $TERM in
  xterm*|screen*|linux*|rxvt*) PS1='\[\e]0;\u@\h: \w \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ';;
esac
# ------------------------------------------------------------


# ----[ color support for ls/*grep ]--------------------------
if [ ! -z "$(which dircolors)" ]; then
  test -r $HOME/.dircolors && eval "$(dircolors -b $HOME/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi
# ------------------------------------------------------------


# ----[ less config ]-----------------------------------------
[ ! -z "$(which lesspipe)" ] && \
  eval "$(SHELL=/bin/sh lesspipe)"

# use pygmentize with less and color
if [ ! -z "$(which pygmentize)" ]; then
  export LESSCOLOR=always
  export LESSOPEN="|pygmentize %s"
fi
# ------------------------------------------------------------


# ----[ z ]---------------------------------------------------
[ ! -d $HOME/src/shell-config/z ] && \
  git clone https://github.com/rupa/z.git $HOME/src/shell-config/z
source $HOME/src/shell-config/z/z.sh
# ------------------------------------------------------------


# ----[ icdiff ]----------------------------------------------
[ ! -d $HOME/src/shell-config/icdiff ] && \
  git clone https://github.com/jeffkaufman/icdiff.git $HOME/src/shell-config/icdiff
# ------------------------------------------------------------


# ----[ go ]--------------------------------------------------
# primary go installation
if [ -d /usr/local/go/bin ]; then
  export GOPATH=$HOME/src/go
  export PATH=/usr/local/go/bin:$GOPATH/bin:$PATH
  export GO111MODULE=on
  export GOPRIVATE=brank.as/*,brankas.dev/*,github.com/brankas/*,github.com/kenshaw/trans*,github.com/kenshaw/rls*
  [ -x /usr/local/go/misc/wasm/go_js_wasm_exec ] && \
    export PATH=$PATH:/usr/local/go/misc/wasm
fi
# ------------------------------------------------------------


# ----[ rust / cargo ]----------------------------------------
if [ "$PLATFORM" = "linux" ]; then
  [ -d $HOME/.cargo/bin ] && \
    export PATH=$HOME/.cargo/bin:$PATH
  [ ! -z "$(which rustc)" ] && \
    export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH
fi
# ------------------------------------------------------------

# ----[ oracle related ]--------------------------------------
export ORACLE_SID=orasid
if [ -f /opt/oracle/oci8.pc ]; then
  export PKG_CONFIG_PATH=/opt/oracle:$PKG_CONFIG_PATH
  export LD_LIBRARY_PATH=$(realpath /opt/oracle/instantclient_*):$LD_LIBRARY_PATH
  export DYLD_LIBRARY_PATH=$(realpath /opt/oracle/instantclient_*):$DYLD_LIBRARY_PATH
fi
# ------------------------------------------------------------


# ----[ android ]-----------------------------------------------
# android sdk
if [ -d $HOME/src/sdk/android-sdk-$PLATFORM/platform-tools ]; then
  export ANDROID_HOME=$(readlink -f $HOME/src/sdk/android-sdk-$PLATFORM)
  export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle
  export PATH=$PATH:$ANDROID_HOME/platform-tools
fi
# ------------------------------------------------------------


# ----[ local paths ]-----------------------------------------
# custom scripts
[ -d $HOME/src/shell-config/scripts ] && \
  export PATH=$PATH:$HOME/src/shell-config/scripts

# shell-config locals
[ -d $HOME/src/shell-config/bin ] && \
  export PATH=$PATH:$HOME/src/shell-config/bin

# pip and other locals
[ -d $HOME/.local/bin ] && \
  export PATH=$PATH:$HOME/.local/bin
# ------------------------------------------------------------


# ----[ bash aliases/completion ]-----------------------------
# custom aliases
[ -f $HOME/.bash_aliases ] && \
  source $HOME/.bash_aliases

# system wide completion
[ -f /etc/bash_completion ] && \
  ! shopt -oq posix && source /etc/bash_completion

# custom bash completions
if [ -d $HOME/src/shell-config/env/bash-completion.d/ ]; then
  for i in $HOME/src/shell-config/env/bash-completion.d/*; do
    source $i
  done
fi

# google sdk bash completion
[ -f $HOME/src/sdk/google-cloud-sdk/completion.bash.inc ] && \
  source $HOME/src/sdk/google-cloud-sdk/completion.bash.inc
[ -f $HOME/src/sdk/google-cloud-sdk/path.bash.inc ] && \
  source $HOME/src/sdk/google-cloud-sdk/path.bash.inc

# digitalocean
if [ ! -z "$(which doctl)" ]; then
  export DIGITALOCEAN_ENABLE_BETA=1
  source <(doctl completion bash)
fi

# mattermost
if [ ! -z "$(which mmctl)" ]; then
  source <(mmctl completion bash)
fi

# rclone
if [ ! -z "$(which rclone)" ]; then
  source <(rclone completion bash)
fi

# aws
if [ ! -z "$(which aws_completer)" ]; then
  complete -C "$(which aws_completer)" aws
fi

# helm
[ ! -z "$(which helm)" ] && \
  source <(helm completion bash)

# usql
[ ! -z "$(which usql)" ] && \
  eval "$(usql --completion-script-bash)"

# xo
[ ! -z "$(which xo)" ] && \
  eval "$(xo completion bash)"

# transctl
[ ! -z "$(which transctl)" ] && \
  eval "$(transctl --completion-script-bash)"

# gunk
if [ ! -z "$(which gunk)" ]; then
  source <(gunk completion bash)
fi

# krew
[ -d "$HOME/.krew/bin" ] && \
  export PATH=$PATH:$HOME/.krew/bin

# npm
[ -d "$HOME/.npm-global/bin" ] && \
  export PATH=$PATH:~/.npm-global/bin

# zig
[ -x "/opt/zig/zig" ] && \
  export PATH=$PATH:/opt/zig

export PNPM_HOME="/home/ken/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
