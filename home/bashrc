# ----[ exit if not interactive ]-----------------------------
[ -z "$PS1" ] && return

# ----[ adopt current directory ]-----------------------------
[ -f /etc/profile.d/vte.sh ] && \
  source /etc/profile.d/vte.sh

# ----[ general bash settings ]-------------------------------
# ignore commands with leading spaces and duplicates
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# check window size after each command, and update LINES/COLUMNS
shopt -s checkwinsize
# enable vi mode
set -o vi

# ----[ bash profile/aliases ]--------------------------------
#[ -e $HOME/.config/bash/profile ] && \
#  source $HOME/.config/bash/profile
[ -e $HOME/.config/bash/aliases ] && \
  source $HOME/.config/bash/aliases

# ----[ bash completion ]-------------------------------------
if [[ -r /usr/share/bash-completion/bash_completion ]]; then
  source /usr/share/bash-completion/bash_completion
fi
for i in $HOME/src/shell-config/completion/*; do
  source $i
done

# platform
PLATFORM=$(uname|sed -e 's/_.*//'|tr '[:upper:]' '[:lower:]'|sed -e 's/^\(msys\|mingw\).*/windows/')

export EDITOR=/usr/bin/nvim
if [ -f /etc/alternatives/editor ]; then
  export EDITOR=/etc/alternatives/editor
fi
alias vi='nvim'
alias vim='nvim'

# ----[ fix $TERM / $TERM_GRAPHICS ]--------------------------
case $TERM in
  xterm-*)
    export TERM=xterm-256color
  ;;
esac

# ----[ platform specific settings ]--------------------------
case $PLATFORM in
  linux)
    export JAVA_HOME=/usr/lib/jvm/default
    export npm_config_prefix=$HOME/.local
  ;;

  darwin)
    if [ -x /usr/local/bin/brew ]; then
      export HOMEBREW_PREFIX="$(/usr/local/bin/brew --prefix)"
    elif [ -x /opt/homebrew/bin/brew ]; then
      export HOMEBREW_PREFIX="$(/opt/homebrew/bin/brew --prefix)"
    fi
    alias ls='ls -G'
    alias vi='nvim'
    alias vim='nvim'
    alias mtr=$HOMEBREW_PREFIX/sbin/mtr
    export EDITOR=$HOMEBREW_PREFIX/bin/nvim
    export BASH_SILENCE_DEPRECATION_WARNING=1
    export HOMEBREW_NO_ENV_HINTS=1
    [ -d $HOME/Library/Python/3.7/bin ] && \
      export PATH=$PATH:$HOME/Library/Python/3.7/bin
    [ -d $HOMEBREW_PREFIX/lib/pkgconfig ] && \
      export PKG_CONFIG_PATH=$HOMEBREW_PREFIX/lib/pkgconfig
    [ -e $HOMEBREW_PREFIX/etc/bash_completion ] && \
      source $HOMEBREW_PREFIX/etc/bash_completion
    [ -d $HOMEBREW_PREFIX/opt/libpq/bin ] && \
      export PATH=$PATH:$HOMEBREW_PREFIX/opt/libpq/bin
    [ -e /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ] && \
      source /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
    export PATH=$HOMEBREW_PREFIX/bin:$PATH
    # use proxy when on a connection with a http proxy
#    NETDEV="Wi-Fi"
#    NET_LOCATION=$(networksetup -getcurrentlocation)
#    PROXY_IP=$(networksetup -getwebproxy $NETDEV|egrep ^Server:|awk '{print $2}')
#    PROXY_PORT=$(networksetup -getwebproxy $NETDEV|egrep ^Port:|awk '{print $2}')
#
#    if [[ "${NET_LOCATION}" != "Automatic" && "${PROXY_IP}" != "" ]]; then
#      export HTTP_PROXY="http://${PROXY_IP}:${PROXY_PORT}/"
#      export HTTPS_PROXY="https://${PROXY_IP}:${PROXY_PORT}/"
#      echo ">>> using HTTP/S Proxy: ${HTTP_PROXY}"
#    fi
  ;;

  windows)
    [ -d /mingw64/bin ] && \
      export PATH=/mingw64/bin:$PATH
    [ -d /c/go/bin ] && \
      export PATH=/c/go/bin:$PATH
  ;;
esac

# ----[ bash prompt ]-----------------------------------------
[ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ] && \
  debian_chroot=$(cat /etc/debian_chroot)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
case $TERM in
  xterm*|screen*|linux*|rxvt*|foot*) PS1='\[\e]0;\u@\h: \w \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ';;
esac

# ----[ color support for ls/*grep ]--------------------------
if [ ! -z "$(type -p dircolors)" ]; then
  source <(dircolors -b)
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
fi

# ----[ disable egrep/fgrep ]---------------------------------
alias egrep='echo error: use grep -E && false'
alias fgrep='echo error: use grep -F && false'

# ----[ less config ]-----------------------------------------
[ -f /etc/profile.d/lesspipe.sh ] && \
  source /etc/profile.d/lesspipe.sh
export LESS='-S -I -R' LESSCOLOR=always
export MANPAGER="sh -c 'col -bx | bat -l man -p'" MANROFFOPT="-c"
export PAGER=/usr/bin/less

# ----[ ssh agent ]-------------------------------------------
[[ -z "$SSH_AUTH_SOCK" && -e $XDG_RUNTIME_DIR/ssh-agent.socket ]] && \
  eval $(ssh-agent) &> /dev/null

# ----[ z ]---------------------------------------------------
[ ! -d $HOME/src/shell-config/z ] && \
  git clone https://github.com/rupa/z.git $HOME/src/shell-config/z
source $HOME/src/shell-config/z/z.sh

# ----[ icdiff ]----------------------------------------------
[ ! -d $HOME/src/shell-config/icdiff ] && \
  git clone https://github.com/jeffkaufman/icdiff.git $HOME/src/shell-config/icdiff

# ----[ go ]--------------------------------------------------
export GOPATH=$HOME/src/go GO111MODULE=on GOPRIVATE=brank.as/*,brankas.dev/*,github.com/brankas/*,github.com/pxl8/*,github.com/kenshaw/t*
if [ ! -d $GOPATH/bin ]; then
  mkdir -p $GOPATH/bin
fi
export PATH=$GOPATH/bin:$PATH
if [ ! -z "$(type -p go)" ]; then
  goroot=
  if [[ -d /usr/local/go/bin && -x /usr/local/go/bin/go ]]; then
    goroot=$(/usr/local/go/bin/go env GOROOT)
  else
    goroot=$(go env GOROOT)
  fi
  if [ ! -z "$goroot" ]; then
    export PATH=$goroot/bin:$PATH
    [ -x $goroot/misc/wasm/go_js_wasm_exec ] && \
      export PATH=$PATH:$goroot/misc/wasm
  fi
fi
if [ ! -z "$(type -p gocomplete)" ]; then
  complete -C "$(type -p gocomplete)" go
fi

# ----[ rust / cargo ]----------------------------------------
if [ ! -z "$(type -p rustc)" ]; then
  export CARGO_HOME=$HOME/.cargo
  export PATH=$HOME/.cargo/bin:$PATH
  export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH
fi

# ----[ oracle database/instantclient ]-----------------------
export ORACLE_SID=orasid
if [ -f /opt/oracle/oci8.pc ]; then
  export PKG_CONFIG_PATH=/opt/oracle:$PKG_CONFIG_PATH
  export LD_LIBRARY_PATH=$(realpath /opt/oracle/instantclient_*):$LD_LIBRARY_PATH
  export DYLD_LIBRARY_PATH=$(realpath /opt/oracle/instantclient_*):$DYLD_LIBRARY_PATH
fi

# ----[ android sdk ]-----------------------------------------
[ -e /etc/profile.d/android-sdk-platform-tools.sh ] && \
  source /etc/profile.d/android-sdk-platform-tools.sh

[ -d /opt/android-sdk ] && \
  export ANDROID_HOME=/opt/android-sdk

# ----[ emscripten ]------------------------------------------
[ -d /usr/lib/emscripten ] && \
  export PATH=$PATH:/usr/lib/emscripten

# ----[ local paths ]-----------------------------------------
[ -d $HOME/src/shell-config/scripts ] && \
  export PATH=$PATH:$HOME/src/shell-config/scripts
[ -d $HOME/src/shell-config/bin ] && \
  export PATH=$PATH:$HOME/src/shell-config/bin
[ -d $HOME/.local/bin ] && \
  export PATH=$PATH:$HOME/.local/bin

# ----[ google sdk completion ]-------------------------------
[ -f /opt/google-cloud-cli/completion.bash.inc ] && \
  source /opt/google-cloud-cli/completion.bash.inc
[ -f /opt/google-cloud-cli/path.bash.inc ] && \
  source /opt/google-cloud-cli/path.bash.inc

# ----[ digitalocean/doctl completion ]-----------------------
if [ ! -z "$(type -p doctl)" ]; then
  export DIGITALOCEAN_ENABLE_BETA=1
  source <(doctl completion bash)
fi

# ----[ mattermost/mmctl completion ]-------------------------
[ ! -z "$(type -p mmctl)" ] && \
  source <(mmctl completion bash)

# ----[ rclone completion ]-----------------------------------
[ ! -z "$(type -p rclone)" ] && \
  source <(rclone genautocomplete bash -)

# ----[ helm completion ]-------------------------------------
[ ! -z "$(type -p helm)" ] && \
  source <(helm completion bash)

# ----[ usql completion ]-------------------------------------
[ ! -z "$(type -p usql)" ] && \
  source <(usql --completion-script-bash)

# ----[ gunk completion ]-------------------------------------
[ ! -z "$(type -p gunk)" ] && \
  source <(gunk completion bash)

# ----[ dbtpl completion ]------------------------------------
[ ! -z "$(type -p dbtpl)" ] && \
  source <(dbtpl completion bash)

# ----[ iv completion ]---------------------------------------
[ ! -z "$(type -p iv)" ] && \
  source <(iv --completion-script-bash)

# ----[ npm global path ]-------------------------------------
[ -d "$HOME/.npm-global/bin" ] && \
  export PATH=$PATH:$HOME/.npm-global/bin

# ----[ pnpm global path ]------------------------------------
[ -d "$HOME/.local/share/pnpm" ] && \
  export PATH=$PATH:$HOME/.local/share/pnpm PNPM_HOME=$HOME/.local/share/pnpm

# ----[ dart path ]-------------------------------------------
[ -d "$HOME/.pub-cache/bin" ] && \
  export PATH=$PATH:$HOME/.pub-cache/bin

# ----[ podman host ]-----------------------------------------
#[ -S "$XDG_RUNTIME_DIR/podman/podman.sock" ] && \
#  export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock

# ----[ podman host ]-----------------------------------------
[ -d /usr/local/osx-ndk-x86/bin ] && \
  export PATH=$PATH:/usr/local/osx-ndk-x86/bin

# ----[ ruby ]------------------------------------------------
[ -d /opt/homebrew/opt/ruby/bin ] && \
  export PATH=/opt/homebrew/opt/ruby/bin:$PATH
export GEM_HOME=$HOME/.gem
