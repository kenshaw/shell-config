"---------------------------------------------------
" setup vam
set nocompatible | filetype indent plugin on | syntax on

set t_Co=256

fun! SetupVAM()
  let c = get(g:, 'vim_addon_manager', {})
  let g:vim_addon_manager = c
  let c.plugin_root_dir = expand('$HOME', 1) . '/.vim/vim-addons'
  " most used options you may want to use:
  " let c.log_to_buf = 1
  " let c.auto_install = 0
  let &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'
  if !isdirectory(c.plugin_root_dir.'/vim-addon-manager/autoload')
    execute '!git clone --depth=1 https://github.com/MarcWeber/vim-addon-manager '
        \       shellescape(c.plugin_root_dir.'/vim-addon-manager', 1)
  endif
  call vam#ActivateAddons([], {'auto_install' : 0})
endfun

call SetupVAM()

VAMActivate vim-twig matchit.zip UltiSnips indentLine vim-airline Tagbar delimitMate Syntastic YouCompleteMe vim-gitgutter github:jdonaldson/vaxe github:elubow/cql-vim github:sprsquish/thrift.vim github:scrooloose/nerdtree
"---------------------------------------------------

autocmd vimenter * if !argc() | NERDTree | endif


"---------------------------------------------------
" enable status info for xterms
set title
"---------------------------------------------------


"---------------------------------------------------
" enable syntax highlighting
syntax on

" enable autocompletetion based on syntax files
au FileType * exe('setl dict+='.$VIMRUNTIME.'/syntax/'.&filetype.'.vim')

" force specific syntax types for files
autocmd BufNewFile,BufRead *.twig set filetype=html.twig
autocmd BufNewFile,BufRead *.cql set filetype=cql
autocmd BufNewFile,BufRead *.thrift set filetype=thrift
autocmd BufNewFile,BufRead *.gradle set filetype=groovy

" clear syntax buffer sync
"autocmd BufEnter * :syntax sync fromstart

filetype plugin on
set omnifunc=syntaxcomplete#Complete
"---------------------------------------------------



"---------------------------------------------------
" plugin settings

" indentLine settings
let g:indentLine_color_term = 111
let g:indentLine_color_gui = '#A4E57E'
"let g:indentLine_char = '|'

let delimitMate_expand_cr = 1

" airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" add nerd tree to ctrl-n
map <C-n> :NERDTreeToggle<CR>

" bind tagbar to f8
nmap <F8> :TagbarToggle<CR>

"---------------------------------------------------



"---------------------------------------------------
" incremental search and highlight search results
set incsearch
"set showmatch
"set hlsearch

" set clear search with <F3>
map <F3> :let @/ = "" <CR>

" use better regex's
"nnoremap / /\v
"vnoremap / /\v
"---------------------------------------------------



"---------------------------------------------------
" disable bombs
set nobomb
"---------------------------------------------------



"---------------------------------------------------
" save info
set viminfo='50,\"1000,s100,:0,%,n~/.viminfo

" turn off modelines
set modelines=0

" ignore stuff
set wildignore=*.o,*.obj,*.bak,*.exe

" enable autoindenting
set autoindent

" set tab display width
set tabstop=4
set shiftwidth=4
set expandtab

" set a really big undo history
set history=1024

" smarter search
set ignorecase
set smartcase

" apply substitutions globally on %s
set gdefault

" some random settings
set encoding=utf-8

" keep cursor in center of screen
set scrolloff=40
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

"set visualbell
"set cursorline
set relativenumber

"set up undo information
if !isdirectory($HOME.'/.vimundo')
  silent !mkdir -p $HOME/.vimundo 2>&1 > /dev/null
  echo 'Created '.$HOME.'/.vimundo'
endif

set undodir=~/.vimundo
set undofile
"---------------------------------------------------


"---------------------------------------------------
" auto trim whitespace on save
"autocmd BufWritePre * normal mj <CR> :%s/\s\+$//e :normal `j
autocmd FileType c,cs,cpp,gradle,groovy,java,cql,sql,vcl,ice,php,javascript,css,html,perl,ruby,sh,python,gitcommit,gitconfig,git,xml,yml,yaml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
"---------------------------------------------------


"---------------------------------------------------
" use tabs as well as %s for matching brackets
nnoremap <tab> %
vnoremap <tab> %

" remap ; to : to save on hitting shift
nnoremap ; :
"---------------------------------------------------

"---------------------------------------------------
" disable arrow keys to learn hjkl
"noremap  <Up> ""
"noremap! <Up> <Esc>
"noremap  <Down> ""
"noremap! <Down> <Esc>
"noremap  <Left> ""
"noremap! <Left> <Esc>
"noremap  <Right> ""
"noremap! <Right> <Esc>
"---------------------------------------------------

"---------------------------------------------------
" When editing a file, always jump to the last cursor position and center that on the screen
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" dvorak remapping
" set langmap='q,\,w,.e,pr,yt,fy,gu,ci,ro,lp,/[,=],aa,os,ed,uf,ig,dh,hj,tk,nl,s\\;,-',\\;z,qx,jc,kv,xb,bn,mm,w\,,v.,z/,[-,]=,\"Q,<W,>E,PR,YT,FY,GU,CI,RO,LP,?{,+},AA,OS,ED,UF,IG,DH,HJ,TK,NL,S:,_\",:Z,QX,JC,KV,XB,BN,MM,W<,V>,Z?

"vmap sb "zdi<b><C-R>z</b><Esc> : wrap <b></b> around VISUALLY selected Text
"vmap st "zdi<?= <C-R>z ?><Esc> : wrap <?= ?> around VISUALLY selected Text

"---------------------------------------------------
" git blame keys
vmap gl :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
